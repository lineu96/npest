out <- list(classes = given.in, coef = mcoef)
return(invisible(out))
}
if (is(xvar, "formula")) {
w <- if (is.null(object))
rep(1, length(resid))
else object$weights
total.points <- 0
coef <- coef1 <- NULL
y.y <- resid
x.x <- resid
if (DataExist) {
coplot(as.formula(paste("y.y~x.x|", as.character(xvar),
sep = "")[2]), data = DaTa, panel = panel.fun,
overlap = overlap, number = n.inter, ylim = c(-ylim.worm,
ylim.worm), xlim = c(-xlim.worm, xlim.worm),
ylab = ylab, xlab = xlab,
show.given = show.given, bg = bg, pch = pch,
cex = cex, bar.bg = bar.bg, ...)
mcoef <- matrix(coef, ncol = 4, byrow = TRUE)
if ("given.values" %in% names(vars <- list(...)))
given.in <- vars$given.values
else {
rhs <- deparen(xvar)[[2L]]
if (length(rhs) == 3 && rhs[[1]] != "$") {
a <- eval(deparen(rhs[[2L]]), envir = as.environment(DaTa))
b <- eval(deparen(rhs[[3L]]), envir = as.environment(DaTa))
if (length(n.inter) == 1L)
n.inter <- rep(n.inter, 2)
if (length(overlap) == 1L)
overlap <- rep(overlap, 2)
Inter1 <- if (is.factor(a))
levels(a)
else co.intervals(unclass(a), number = n.inter[1L],
overlap = overlap[1L])
Inter2 <- if (is.factor(b))
levels(b)
else co.intervals(unclass(b), number = n.inter[2L],
overlap = overlap[2L])
given.in <- list(Inter1, Inter2)
}
else {
a <- eval(deparen(rhs), envir = as.environment(DaTa))
if (length(n.inter) == 1L)
n.inter <- rep(n.inter, 2)
if (length(overlap) == 1L)
overlap <- rep(overlap, 2)
given.in <- if (is.factor(a))
levels(a)
else co.intervals(unclass(a), number = n.inter[1L],
overlap = overlap[1L])
}
}
out <- list(classes = given.in, coef = mcoef)
return(invisible(out))
}
else {
coplot(as.formula(paste("y.y~x.x|", as.character(xvar),
sep = "")[2]), panel = panel.fun, overlap = overlap,
number = n.inter, ylim = c(-ylim.worm, ylim.worm),
xlim = c(-xlim.worm, xlim.worm), ylab = ylab,
xlab = xlab, show.given = show.given,
bg = bg, pch = pch, cex = cex, bar.bg = bar.bg,
...)
mcoef <- matrix(coef, ncol = 4, byrow = TRUE)
if ("given.values" %in% names(vars <- list(...)))
given.in <- vars$given.values
else {
rhs <- deparen(xvar)[[2L]]
if (length(rhs) == 3 && rhs[[1]] != "$") {
a <- eval(deparen(rhs[[2L]]))
b <- eval(deparen(rhs[[3L]]))
if (length(n.inter) == 1L)
n.inter <- rep(n.inter, 2)
if (length(overlap) == 1L)
overlap <- rep(overlap, 2)
Inter1 <- if (is.factor(a))
levels(a)
else co.intervals(unclass(a), number = n.inter[1L],
overlap = overlap[1L])
Inter2 <- if (is.factor(b))
levels(b)
else co.intervals(unclass(b), number = n.inter[2L],
overlap = overlap[2L])
given.in <- list(Inter1, Inter2)
}
else {
a <- eval(deparen(rhs))
if (length(n.inter) == 1L)
n.inter <- rep(n.inter, 2)
if (length(overlap) == 1L)
overlap <- rep(overlap, 2)
given.in <- if (is.factor(a))
levels(a)
else co.intervals(unclass(a), number = n.inter[1L],
overlap = overlap[1L])
}
}
out <- list(classes = given.in, coef = mcoef)
return(invisible(out))
}
}
}
### Contagem
count <- read.csv2("DataCont.csv", header = T, sep = ',')
setwd("~/Dropbox/IC/IC/1. Dados")
### Contagem
count <- read.csv2("DataCont.csv", header = T, sep = ',')
count$sessaoR <- count$sessao
count$sessaoR <- relevel(count$sessaoR, ref = 'Se3')
contrasts(count$sessaoR) <- 'contr.helmert'
contrasts(count$sessaoR)[,1] <- contrasts(count$sessaoR)[,1]/2
contrasts(count$sessaoR)[,2] <- contrasts(count$sessaoR)[,2]/3
## Criando um fator combinando animal e sessao
count$animals <- factor(count$animal):count$sessao
prop <- read.csv2("DataProp.csv", header = T, sep = ';')
prop <- prop[,-c(8)]
prop$sessaoR <- prop$sessao
prop$sessaoR <- relevel(prop$sessaoR, ref = 'Se3')
contrasts(prop$sessaoR) <- 'contr.helmert'
contrasts(prop$sessaoR)[,1] <- contrasts(prop$sessaoR)[,1]/2
contrasts(prop$sessaoR)[,2] <- contrasts(prop$sessaoR)[,2]/3
## Criando um fator combinando animal e sessao
prop$animals <- factor(prop$animal):prop$sessao
## Transformação da resposta para que seja possível utilizar
## a distribuição beta
prop$neutra <- 1-prop$resporelha2
sum(prop$neutra == 1)
sum(prop$neutra == 0)
## Transformação da resposta para que seja possível utilizar
## a distribuição beta
prop$neutra <- 1-prop$resporelha2
sum(prop$neutra == 1)
sum(prop$neutra == 0)
prop$neutra.be <- ((prop$neutra*(180-1))+(0.5))/180
sum(prop$neutra.be == 1)
sum(prop$neutra.be == 0)
count$momento <- ordered(count$tempo, levels=c("Antes", "Durante", "Depois"))
prop$momento <- ordered(prop$tempo, levels=c("Antes", "Durante", "Depois"))
count2 <- count[,c(1,3,4,5,6,10)]
count2$momento <- ordered(count2$tempo, levels=c("Antes", "Durante", "Depois"))
count3 <- count2 %>%
as_tibble %>%
dplyr::select(
animal, sessao,
linhagem, momento,
norelha)
count4 <-
count3 %>%
gather(key = "resposta", value = "valor", norelha)
levels(count4$momento) <- c('Ant.', 'Dur.', 'Dep.')
levels(count4$linhagem) <- c('Reat.', 'Não Reat.')
g1 <- ggplot(count4, aes(x = valor)) +
geom_histogram(col = 1, fill = 1, alpha = 0.5) +
xlab('Contagem') +
ylab('Frequência') +
theme_bw() +
facet_wrap(~ resposta, ncol = 1) +
scale_y_continuous(breaks = round(seq(0, 120, length.out = 3), 2))
g2 <- ggplot(count4, aes(x = linhagem, y = valor)) +
geom_boxplot(fill = 1, alpha = 0.5) +
xlab('') +
ylab('Contagem') +
theme_bw() +
theme(legend.title = element_blank(),
axis.ticks.y = element_blank()) +
scale_color_discrete(guide = F) +
facet_wrap(~resposta, ncol = 1)
g3 <- ggplot(count4, aes(x = sessao, y = valor)) +
geom_boxplot(fill = 1, alpha = 0.5) +
xlab('') +
ylab('') +
theme_bw() +
theme(legend.title = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
scale_color_discrete(guide = F) +
facet_wrap(~ resposta, ncol = 1)
g4<-
ggplot(count4, aes(x=momento, y=valor)) +
geom_boxplot(fill=1, alpha=0.5)+ xlab('')+ ylab('') +
theme_bw()+
theme(legend.title=element_blank(),
#axis.title.x=element_blank(),
#axis.text.x=element_blank(),
#axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())  + scale_color_discrete(guide = F)+
facet_wrap(~resposta, ncol = 1)
prop2 <- prop[,c(1,2,3,5,6,17)]
prop2$momento <- ordered(prop2$tempo, levels=c("Antes", "Durante", "Depois"))
prop3 <- prop2 %>%
as_tibble %>%
dplyr::select(
animal, sessao,
linhagem, momento,
neutra)
prop4 <-
prop3 %>%
gather(key = "resposta", value = "valor", neutra)
levels(prop4$momento) <- c('Ant.', 'Dur.', 'Dep.')
levels(prop4$linhagem) <- c('Reat.', 'Não Reat.')
g5 <- ggplot(prop4, aes(x = valor)) +
geom_histogram(col = 1, fill = 1, alpha = 0.5) +
xlab('Contagem') +
ylab('Frequência') +
theme_bw() +
facet_wrap(~ resposta, ncol = 1) +
scale_y_continuous(breaks = round(seq(0, 120, length.out = 3), 2))
g6 <- ggplot(prop4, aes(x = linhagem, y = valor)) +
geom_boxplot(fill = 1, alpha = 0.5) +
xlab('Linhagem') +
ylab('Proporção') +
theme_bw() +
theme(legend.title = element_blank(),
axis.ticks.y = element_blank()) +
scale_color_discrete(guide = F) +
facet_wrap(~resposta, ncol = 1)
g7 <- ggplot(prop4, aes(x = sessao, y = valor)) +
geom_boxplot(fill = 1, alpha = 0.5) +
xlab('Sessão') +
ylab('') +
theme_bw() +
theme(legend.title = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
scale_color_discrete(guide = F) +
facet_wrap(~ resposta, ncol = 1)
g8<-
ggplot(prop4, aes(x=momento, y=valor)) +
geom_boxplot(fill=1, alpha=0.5)+ xlab('Momento')+ ylab('') +
theme_bw()+
theme(legend.title=element_blank(),
#axis.title.x=element_blank(),
#axis.text.x=element_blank(),
#axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())  + scale_color_discrete(guide = F)+
facet_wrap(~resposta, ncol = 1)
ggarrange(g1, g2, g3, g4,
g5, g6, g7, g8,
labels = c("A", "B", "", ""),
ncol = 4, nrow = 2)
levels(count2$momento) <- c('Ant.', 'Dur.', 'Dep.')
levels(count2$linhagem) <- c('Reat.', 'Não Reat.')
levels(prop2$momento) <- c('Ant.', 'Dur.', 'Dep.')
levels(prop2$linhagem) <- c('Reat.', 'Não Reat.')
p1 <-
ggplot(count2, aes(x=momento, y=norelha, group=linhagem))+
theme_bw() +
geom_line(aes(group=animal, linetype=linhagem)) +
theme(legend.position = 'top') +
facet_wrap(~sessao) +
#labs(title = "norelha")+
xlab('Momento') + geom_point()#+
p2 <-
ggplot(prop2, aes(x=momento, y=neutra, group=linhagem))+
theme_bw() +
geom_line(aes(group=animal, linetype=linhagem)) +
theme(legend.position = 'top') +
facet_wrap(~sessao) +
#labs(title = "norelha")+
xlab('Momento') + geom_point()+
theme(legend.position="none")#+
ggarrange(p1, p2,
labels = c("A", "B", "", ""),
ncol = 1, nrow = 2,
common.legend = TRUE, legend="bottom")
mPO <- gamlss(norelha ~ sessaoR + tempo + linhagem
+ (sessaoR + tempo + linhagem)^2 +
re(random = list(animal=~1, animals=~1), method = 'REML'),
data = count, method = RS(50),
family = PO())
mNBI   <- gamlss(norelha ~ sessaoR + tempo + linhagem
+ (sessaoR + tempo + linhagem)^2 +
re(random = list(animal=~1, animals=~1), method = 'REML'),
data = count, method = RS(50),
family = NBI())
mZIP   <- gamlss(norelha ~ sessaoR + tempo + linhagem
+ (sessaoR + tempo + linhagem)^2 +
re(random = list(animal=~1, animals=~1), method = 'REML'),
sigma.formula = ~ sessaoR + tempo + linhagem,
data = count, method = RS(500),
family = ZIP())
mZINBI <- gamlss(norelha ~ sessaoR + tempo + linhagem
+ (sessaoR + tempo + linhagem)^2 +
re(random = list(animal=~1, animals=~1), method = 'REML'),
nu.formula = ~ sessaoR + tempo + linhagem,
data = count, method = RS(500),
family = ZINBI())
mZAP   <- gamlss(norelha ~ sessaoR + tempo + linhagem
+ (sessaoR + tempo + linhagem)^2 +
re(random = list(animal=~1, animals=~1), method = 'REML'),
sigma.formula = ~ sessaoR + tempo + linhagem,
data = count, method = RS(50),
family = ZAP())
mZANBI <- gamlss(norelha ~ sessaoR + tempo + linhagem
+ (sessaoR + tempo + linhagem)^2 +
re(random = list(animal=~1, animals=~1), method = 'REML'),
nu.formula = ~ sessaoR + tempo + linhagem,
data = count, method = RS(50),
family = ZANBI())
summary(mPO)
summary(mZANBI)
summary(mZINBI)
tab_norelha <- data.frame("Modelo" = c(
'PO' , 'NBI', 'ZIP', 'ZINBI', 'ZAP',
'ZANBI'),
"AIC"       = rep(NA, 6),
"BIC"    = rep(NA, 6),
"Deviance" = rep(NA, 6),
"logLik"  = rep(NA, 6),
"df"  = rep(NA, 6),
"Conv" = rep(NA, 6),
"Iter" = rep(NA, 6),
check.names = FALSE)
tab_norelha[1, 2] <- mPO$aic
tab_norelha[1, 3] <- mPO$sbc
tab_norelha[1, 4] <- mPO$G.deviance
tab_norelha[1, 5] <- logLik(mPO)
tab_norelha[1, 6] <- mPO$df.fit
tab_norelha[1, 7] <- mPO$converged
tab_norelha[1, 8] <- mPO$iter
tab_norelha[2, 2] <- mNBI$aic
tab_norelha[2, 3] <- mNBI$sbc
tab_norelha[2, 4] <- mNBI$G.deviance
tab_norelha[2, 5] <- logLik(mNBI)
tab_norelha[2, 6] <- mNBI$df.fit
tab_norelha[2, 7] <- mNBI$converged
tab_norelha[2, 8] <- mNBI$iter
tab_norelha[3, 2] <- mZIP$aic
tab_norelha[3, 3] <- mZIP$sbc
tab_norelha[3, 4] <- mZIP$G.deviance
tab_norelha[3, 5] <- logLik(mZIP)
tab_norelha[3, 6] <- mZIP$df.fit
tab_norelha[3, 7] <- mZIP$converged
tab_norelha[3, 8] <- mZIP$iter
tab_norelha[4, 2] <- mZINBI$aic
tab_norelha[4, 3] <- mZINBI$sbc
tab_norelha[4, 4] <- mZINBI$G.deviance
tab_norelha[4, 5] <- logLik(mZINBI)
tab_norelha[4, 6] <- mZINBI$df.fit
tab_norelha[4, 7] <- mZINBI$converged
tab_norelha[4, 8] <- mZINBI$iter
tab_norelha[5, 2] <- mZAP$aic
tab_norelha[5, 3] <- mZAP$sbc
tab_norelha[5, 4] <- mZAP$G.deviance
tab_norelha[5, 5] <- logLik(mZAP)
tab_norelha[5, 6] <- mZAP$df.fit
tab_norelha[5, 7] <- mZAP$converged
tab_norelha[5, 8] <- mZAP$iter
tab_norelha[6, 2] <- mZANBI$aic
tab_norelha[6, 3] <- mZANBI$sbc
tab_norelha[6, 4] <- mZANBI$G.deviance
tab_norelha[6, 5] <- logLik(mZANBI)
tab_norelha[6, 6] <- mZANBI$df.fit
tab_norelha[6, 7] <- mZANBI$converged
tab_norelha[6, 8] <- mZANBI$iter
tab_norelha
tab_norelha[1:5]
mZINBI
mZINBIr1 <- gamlss(formula = norelha ~ sessaoR + tempo + linhagem +
re(random = list(animal = ~1, animals = ~1), method = 'REML'),
nu.formula = norelha ~ sessaoR + tempo + linhagem,
family = ZINBI(), data = count)
mZINBIr1 <- gamlss(formula = norelha ~ sessaoR + tempo + linhagem +
re(random = list(animal = ~1, animals = ~1), method = 'REML'),
nu.formula = norelha ~ sessaoR + tempo + linhagem,
family = ZINBI(), data = count, method = RS(500))
mZINBIr2 <- gamlss(formula = norelha ~ sessaoR + tempo + linhagem +
re(random = list(animal = ~1, animals = ~1), method = 'REML'),
family = ZINBI(), data = count, method = RS(500))
tab_norelha2 <- data.frame("Modelo" = c(
'Completo' , 'Reajuste 1',
'Reajuste 2'),
"AIC"       = rep(NA, 3),
"BIC"    = rep(NA, 3),
"Deviance" = rep(NA, 3),
"logLik"  = rep(NA, 3),
"df"  = rep(NA, 3),
"Conv" = rep(NA, 3),
"P-val" = rep(NA, 3),
check.names = FALSE)
tab_norelha2[1, 2] <- mZINBI$aic
tab_norelha2[1, 3] <- mZINBI$sbc
tab_norelha2[1, 4] <- mZINBI$G.deviance
tab_norelha2[1, 5] <- logLik(mZINBI)
tab_norelha2[1, 6] <- mZINBI$df.fit
tab_norelha2[1, 7] <- mZINBI$converged
tab_norelha2[1, 8] <- '-'
tab_norelha2[2, 2] <- mZINBIr1$aic
tab_norelha2[2, 3] <- mZINBIr1$sbc
tab_norelha2[2, 4] <- mZINBIr1$G.deviance
tab_norelha2[2, 5] <- logLik(mZINBIr1)
tab_norelha2[2, 6] <- mZINBIr1$df.fit
tab_norelha2[2, 7] <- mZINBIr1$converged
tab_norelha2[2, 8] <- round(LR.test(mZINBIr1, mZINBI, print = F)$p.val, 2)
tab_norelha2[3, 2] <- mZINBIr2$aic
tab_norelha2[3, 3] <- mZINBIr2$sbc
tab_norelha2[3, 4] <- mZINBIr2$G.deviance
tab_norelha2[3, 5] <- logLik(mZINBIr2)
tab_norelha2[3, 6] <- mZINBIr2$df.fit
tab_norelha2[3, 7] <- mZINBIr2$converged
tab_norelha2[3, 8] <- round(LR.test(mZINBIr2, mZINBI, print = F)$p.val, 2)
tab_norelha2
tab_norelha2
tab_norelha2
plot(mZINBIr1)
plot(mZINBIr2)
summary(mZINBIr1)
summary(mZINBIr2)
res.zanbi    <- mZINBIr2$residuals
plot(res.zanbi, xlab = 'Índices', ylab = 'Resíduos',xaxt="n",
yaxt="n", col = 0)
axis(1, tck=1, col.ticks="light gray")
axis(2, tck=1, col.ticks="light gray", lwd.ticks="1")
points(res.zanbi, xlab = 'Índices', ylab = 'Resíduos')
abline(h = 0, lwd = 2, lty = 2, col =2)
mtext('Gráfico de Resíduos', side=3, line=3, cex=1 )
mtext("Contagem", side=2, line=5, cex=1.5 )
worm(mZANBIr1, xlab = "Quantil normal unitário", ylab = "Desvio", bg = 0)
worm(mZINBIr2, xlab = "Quantil normal unitário", ylab = "Desvio", bg = 0)
mtext("Worm-Plot", side=3, line=3, cex=1 )
plot(density(res.zanbi), xlab = 'Resíduos', ylab = 'Densidade',
main = '', lwd = 2,xaxt="n",
yaxt="n", col = 0)
axis(1, tck=1, col.ticks="light gray")
axis(2, tck=1, col.ticks="light gray", lwd.ticks="1")
lines(density(res.zanbi), xlab = '', ylab = 'Densidade',
main = '', lwd = 2)
abline(v=0, lty = 2, col = 2)
mtext("Densidade dos Resíduos", side=3, line=3, cex=1 )
car::qqPlot(res.zanbi, dist = 'norm', envelope = .95,
xlab = 'Quantis  Teóricos',
ylab = 'Quantis Amostrais',
main = "",
lwd=2, pch=16, id = FALSE,
col.lines = 2)
mtext("Q-Q Plot", side=3, line=3, cex=1 )
tab_norelha2
tab_norelha
getSmo(mZINBIr2)
# count
s<-as.data.frame(as.matrix(mZINBIr2$mu.coefficients[1:6]))
s
s$nu <- as.matrix(mZINBIr2$nu.coefficients)[,1]
s$nu
mZINBIr2
# count
s<-as.data.frame(as.matrix(mZINBIr2$mu.coefficients[1:6]))
s$mu_std <- sqrt(diag(vcov(mZINBIr2)))[1:6]
s$mu_std <- sqrt(diag(vcov(mZINBIr2)))[1:6]
s
summary(mZINBIr2)
s
names(s) <- c("mu")
s$mu_std <- sqrt(diag(vcov(mZINBIr2)))[1:6]
s
# count
s<-as.data.frame(as.matrix(mZINBIr2$mu.coefficients[1:6]))
names(s) <- c("mu")
s$mu_std <- sqrt(diag(vcov(mZINBIr2)))[1:6]
s
w <- data.frame(exp_mu = exp(s$mu),
ice_mu = (exp(s$mu-(1.96*s$mu_std))),
ide_mu = (exp(s$mu+(1.96*s$mu_std))))
w
row.names(s)
row.names(w) <- row.names(s)
w <- round(w,2)
w
w[,4:6]
getwd()
setwd("~/minicurso_r/.git")
setwd("~/minicurso_r")
getwd()
library(rmarkdown)
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
dir()
setwd("~/npest")
render_site()
render_site()
render_site()
getwd()
fd
render_site()
dir()
render_site()
